"""
== Лото ==
Правила игры в лото.
Игра ведется с помощью специальных карточек, на которых отмечены числа,
и фишек (бочонков) с цифрами.
Количество бочонков — 90 штук (с цифрами от 1 до 90).
Каждая карточка содержит 3 строки по 9 клеток. В каждой строке по 5 случайных цифр,
расположенных по возрастанию. Все цифры в карточке уникальны. Пример карточки:
--------------------------
    9 43 62          74 90
 2    27    75 78    82
   41 56 63     76      86
--------------------------
В игре 2 игрока: пользователь и компьютер. Каждому в начале выдается
случайная карточка.
Каждый ход выбирается один случайный бочонок и выводится на экран.
Также выводятся карточка игрока и карточка компьютера.
Пользователю предлагается зачеркнуть цифру на карточке или продолжить.
Если игрок выбрал "зачеркнуть":
    Если цифра есть на карточке - она зачеркивается и игра продолжается.
    Если цифры на карточке нет - игрок проигрывает и игра завершается.
Если игрок выбрал "продолжить":
    Если цифра есть на карточке - игрок проигрывает и игра завершается.
    Если цифры на карточке нет - игра продолжается.

Побеждает тот, кто первый закроет все числа на своей карточке.
Пример одного хода:
Новый бочонок: 70 (осталось 76)
------ Ваша карточка -----
 6  7          49    57 58
   14 26     -    78    85
23 33    38    48    71
--------------------------
-- Карточка компьютера ---
 7 11     - 14    87
      16 49    55 77    88
   15 20     -       76  -
--------------------------
Зачеркнуть цифру? (y/n)
Подсказка: каждый следующий случайный бочонок из мешка удобно получать
с помощью функции-генератора.
Подсказка: для работы с псевдослучайными числами удобно использовать
модуль random: http://docs.python.org/3/library/random.html"""

import random
import re

class Cards:
    def __init__(self, name):
        # создается 15 рандомных чисел и распределяются на 3 ряда в карточке
        self.name = name
        self.numbers = random.sample(range(1, 91), 15)
        self.line_1 = self.numbers[0:5]
        self.line_2 = self.numbers[5:10]
        self.line_3 = self.numbers[10:]
        self.counter = 0

        def gener(lst):
            # числа сортируются по порядку, в каждую строку добавляется по 4 постых значения
            # все 9 элементов списка собираются в одну строку, отделенный друг от друга 2 пробелами
            line = sorted(lst)
            line = [str(i) for i in line]
            for i in range(4):
                line.insert(random.randint(0, 9), ' ')
            return '  '.join(line)

        self.row_1 = gener(self.line_1)
        self.row_2 = gener(self.line_2)
        self.row_3 = gener(self.line_3)
        self.rows = [self.row_1, self.row_2, self.row_3]

    def wrapper(self):
        # декоратор, чтобы создать заданный шаблон
        print(f'----- Карточка {self.name} -----')
        print(self.row_1)
        print(self.row_2)
        print(self.row_3)
        print(f'------------------------------')

    def check_number(self, number):
        # функция проверяет есть ли выпавшее число на карточке
        if number in self.numbers:
            return True
        else:
            return False

    def cross_out(self, number):
        # функция, которая зачеркивает выпавшее число, если оно есть на карточке
        if number in self.numbers:
            self.row_1 = re.sub(f'{number}', '-', self.row_1)
            self.row_2 = re.sub(f'{number}', '-', self.row_2)
            self.row_3 = re.sub(f'{number}', '-', self.row_3)
            return self.wrapper()
        else:
            return self.wrapper()

    @staticmethod
    def gener():
        # функция генерирует случайный список из заданных чисел, и показывает их по одному при вытягивании числа
        numbers = random.sample(range(1, 91), 90)
        print(numbers)
        i = 0
        while i < len(numbers):
            yield [numbers[i], i]
            i = i + 1

    def check_card(self):
        # функция проверяет количество зачеркнутых чисел. чтобы выбрать победителя
        num = [i for i in self.row_1 if i == '-'] + [i for i in self.row_2 if i == '-'] + [i for i in self.row_3 if i == '-']
        return len(num)

    @staticmethod
    def winning(answer):
        # функция проверяет кто выиграл после каждого хода, или если игрок решил прервать игру
        win_1 = loto_1.check_card()
        win_2 = loto_2.check_card()
        if answer == 'x' or answer == 'y':
            if win_1 == 15:
                print('Выигрывает участник')
            elif win_2 == 15:
                print('Выигрывает компьютер')
            else:
                pass
        else:
            if win_1 > win_2:
                print('Выигрывает участник')
            elif win_1 == win_2:
                print('Ничья')
            else:
                print('Выигрывает компьютер')

gen_1 = Cards.gener()

loto_1 = Cards('Участника')
loto_2 = Cards('Компьютера')

print('''Вы играете в лото. Каждый ход выбирается один случайный бочонок с числом. 
Вам предлагается зачеркнуть цифру на карточке или продолжить.''')

print('''Если вы выбираете 'зачеркнуть':
    Если цифра есть на карточке - она зачеркивается и игра продолжается.
    Если цифры на карточке нет - вы проигрываете и игра завершается.
Если вы выбраете "продолжить":
    Если цифра есть на карточке - вы проигрываете и игра завершается.
    Если цифры на карточке нет - игра продолжается
Чтобы зачеркнуть введите  - x, продолжить - y, для выхода нажмите - q''')
loto_1.wrapper()
loto_2.wrapper()


while True:
    # цикл, в котором вызывется генератор для вывода бочонка, затем идут проверки на наличие бочонка в карточках
    # и проверка на количество зачеркнутых бочонков
    number = next(gen_1)[0]
    counter = int(next(gen_1)[1]/2)
    check_1 = loto_1.check_number(number)
    answer = input(f'Выпало число - {number}, осталось {89-counter} чисел - ')
    if answer == 'x':
        if check_1:
            loto_2.cross_out(number)
            loto_1.cross_out(number)
            Cards.winning(answer)
        else:
            print('Вы проиграли')
            break
    elif answer == 'y':
        if check_1:
            print('Вы проиграли')
            break
        else:
            loto_2.cross_out(number)
            loto_1.cross_out(number)
            Cards.winning(answer)
            continue
    elif answer == 'q':
        Cards.winning(answer)
        break
    else:
        print('Неправильный ввод расценивается как выход')
        break




